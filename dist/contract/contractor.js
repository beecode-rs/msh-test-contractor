import { describe, it } from '@jest/globals';
import { contractorService } from '../contract/contractor-service.js';
import { contractExpectService } from '../contract/expect/contract-expect-service.js';
import { contractMockService } from '../contract-mock/contract-mock-service.js';
import { subjectService } from '../subject/subject-service.js';
export const contractor = (contract, fnName) => {
    const { terms, mock } = contract.fns[fnName];
    const moduleMockStrategy = contractMockService.strategyFromFunctionMock(contract.mock);
    const functionMockStrategy = contractMockService.strategyFromFunctionMock(mock);
    describe(contractorService.testDescription({ fnName }), () => {
        try {
            terms.forEach((term) => {
                const subjectStrategy = subjectService.strategyFromContractFunction({ contract, fnName, term });
                it(contractorService.testName({ term }), async () => {
                    moduleMockStrategy.mock({ params: term.params });
                    functionMockStrategy.mock({ params: term.params });
                    const expectStrategy = contractExpectService.fromTerm({ term });
                    await expectStrategy.test(() => subjectStrategy.exec(term));
                    functionMockStrategy.restore();
                    moduleMockStrategy.restore();
                });
            });
        }
        catch (err) {
            console.error(`Error running test on contract:${contract.subjectName}, fn:${fnName}`); // eslint-disable-line no-console
            throw err;
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9jb250cmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTVDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBQ3BFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFBO0FBQ3BGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFBO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUc3RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FPekIsUUFBVyxFQUNYLE1BQVksRUFDTCxFQUFFO0lBQ1QsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBc0IsQ0FBQTtJQUVqRSxNQUFNLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN0RixNQUFNLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRS9FLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUM1RCxJQUFJLENBQUM7WUFDSixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3RCLE1BQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtnQkFFL0YsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7b0JBQ25ELGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtvQkFDaEQsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO29CQUNsRCxNQUFNLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO29CQUMvRCxNQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO29CQUMzRCxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtvQkFDOUIsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQzdCLENBQUMsQ0FBQyxDQUFBO1lBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDSCxDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLFFBQVEsQ0FBQyxXQUFXLFFBQVEsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLGlDQUFpQztZQUN2SCxNQUFNLEdBQUcsQ0FBQTtRQUNWLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnXG5cbmltcG9ydCB7IGNvbnRyYWN0b3JTZXJ2aWNlIH0gZnJvbSAnI3NyYy9jb250cmFjdC9jb250cmFjdG9yLXNlcnZpY2UnXG5pbXBvcnQgeyBjb250cmFjdEV4cGVjdFNlcnZpY2UgfSBmcm9tICcjc3JjL2NvbnRyYWN0L2V4cGVjdC9jb250cmFjdC1leHBlY3Qtc2VydmljZSdcbmltcG9ydCB7IGNvbnRyYWN0TW9ja1NlcnZpY2UgfSBmcm9tICcjc3JjL2NvbnRyYWN0LW1vY2svY29udHJhY3QtbW9jay1zZXJ2aWNlJ1xuaW1wb3J0IHsgc3ViamVjdFNlcnZpY2UgfSBmcm9tICcjc3JjL3N1YmplY3Qvc3ViamVjdC1zZXJ2aWNlJ1xuaW1wb3J0IHsgQ29udHJhY3QsIENvbnRyYWN0RnVuY3Rpb24sIFByb3BUeXBlIH0gZnJvbSAnI3NyYy90eXBlcydcblxuZXhwb3J0IGNvbnN0IGNvbnRyYWN0b3IgPSA8XG5cdE0sXG5cdFNOIGV4dGVuZHMgRXh0cmFjdDxrZXlvZiBNLCBzdHJpbmc+LFxuXHRTIGV4dGVuZHMgUHJvcFR5cGU8TSwgU04+LFxuXHRDIGV4dGVuZHMgQ29udHJhY3Q8TSwgU04sIFM+LFxuXHRDRk5LIGV4dGVuZHMgRXh0cmFjdDxrZXlvZiBQcm9wVHlwZTxDLCAnZm5zJz4sIHN0cmluZz4sXG4+KFxuXHRjb250cmFjdDogQyxcblx0Zm5OYW1lOiBDRk5LXG4pOiB2b2lkID0+IHtcblx0Y29uc3QgeyB0ZXJtcywgbW9jayB9ID0gY29udHJhY3QuZm5zW2ZuTmFtZV0hIGFzIENvbnRyYWN0RnVuY3Rpb25cblxuXHRjb25zdCBtb2R1bGVNb2NrU3RyYXRlZ3kgPSBjb250cmFjdE1vY2tTZXJ2aWNlLnN0cmF0ZWd5RnJvbUZ1bmN0aW9uTW9jayhjb250cmFjdC5tb2NrKVxuXHRjb25zdCBmdW5jdGlvbk1vY2tTdHJhdGVneSA9IGNvbnRyYWN0TW9ja1NlcnZpY2Uuc3RyYXRlZ3lGcm9tRnVuY3Rpb25Nb2NrKG1vY2spXG5cblx0ZGVzY3JpYmUoY29udHJhY3RvclNlcnZpY2UudGVzdERlc2NyaXB0aW9uKHsgZm5OYW1lIH0pLCAoKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdHRlcm1zLmZvckVhY2goKHRlcm0pID0+IHtcblx0XHRcdFx0Y29uc3Qgc3ViamVjdFN0cmF0ZWd5ID0gc3ViamVjdFNlcnZpY2Uuc3RyYXRlZ3lGcm9tQ29udHJhY3RGdW5jdGlvbih7IGNvbnRyYWN0LCBmbk5hbWUsIHRlcm0gfSlcblxuXHRcdFx0XHRpdChjb250cmFjdG9yU2VydmljZS50ZXN0TmFtZSh7IHRlcm0gfSksIGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRtb2R1bGVNb2NrU3RyYXRlZ3kubW9jayh7IHBhcmFtczogdGVybS5wYXJhbXMgfSlcblx0XHRcdFx0XHRmdW5jdGlvbk1vY2tTdHJhdGVneS5tb2NrKHsgcGFyYW1zOiB0ZXJtLnBhcmFtcyB9KVxuXHRcdFx0XHRcdGNvbnN0IGV4cGVjdFN0cmF0ZWd5ID0gY29udHJhY3RFeHBlY3RTZXJ2aWNlLmZyb21UZXJtKHsgdGVybSB9KVxuXHRcdFx0XHRcdGF3YWl0IGV4cGVjdFN0cmF0ZWd5LnRlc3QoKCkgPT4gc3ViamVjdFN0cmF0ZWd5LmV4ZWModGVybSkpXG5cdFx0XHRcdFx0ZnVuY3Rpb25Nb2NrU3RyYXRlZ3kucmVzdG9yZSgpXG5cdFx0XHRcdFx0bW9kdWxlTW9ja1N0cmF0ZWd5LnJlc3RvcmUoKVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHJ1bm5pbmcgdGVzdCBvbiBjb250cmFjdDoke2NvbnRyYWN0LnN1YmplY3ROYW1lfSwgZm46JHtmbk5hbWV9YCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdFx0XHR0aHJvdyBlcnJcblx0XHR9XG5cdH0pXG59XG4iXX0=