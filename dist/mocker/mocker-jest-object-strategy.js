import { vi } from 'vitest';
import { JestSpyFunctionStrategy } from '#src/jest-spy/jest-spy-function-strategy';
export class MockerJestObjectStrategy {
    _contract;
    _spies = [];
    constructor(_contract) {
        this._contract = _contract;
    }
    mockRestore() {
        this._spies.forEach((spy) => spy.mockRestore());
    }
    contractSpy() {
        return this._mockObject();
    }
    _mockObject() {
        const { module, subjectName } = this._contract;
        return Object.fromEntries(Object.entries(this._contract.fns).map(([fnName, ctFunc]) => {
            const jestSpyFunction = new JestSpyFunctionStrategy({ name: `${subjectName}.${fnName}`, terms: ctFunc.terms });
            const spy = vi.spyOn(module[subjectName], fnName).mockImplementation(jestSpyFunction.mockImplementationFactory());
            this._spies.push(spy);
            return [fnName, spy];
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VyLWplc3Qtb2JqZWN0LXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vY2tlci9tb2NrZXItamVzdC1vYmplY3Qtc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUzQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQU1sRixNQUFNLE9BQU8sd0JBQXdCO0lBR2Q7SUFGWixNQUFNLEdBQW9CLEVBQUUsQ0FBQTtJQUV0QyxZQUFzQixTQUFzQjtRQUF0QixjQUFTLEdBQVQsU0FBUyxDQUFhO0lBQUcsQ0FBQztJQUVoRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxXQUFXO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVTLFdBQVc7UUFDcEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBRTlDLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDM0QsTUFBTSxlQUFlLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLFdBQVcsSUFBSSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDL0csTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQTtZQUNqSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUVyQixPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLENBQUMsQ0FBQyxDQUNGLENBQUE7SUFDRixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2aSB9IGZyb20gJ3ZpdGVzdCdcblxuaW1wb3J0IHsgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LWZ1bmN0aW9uLXN0cmF0ZWd5J1xuaW1wb3J0IHsgTW9ja2VyU3RyYXRlZ3kgfSBmcm9tICcjc3JjL21vY2tlci9tb2NrZXItc3RyYXRlZ3knXG5pbXBvcnQgeyBBbnlDb250cmFjdCB9IGZyb20gJyNzcmMvdHlwZXMnXG5cbmV4cG9ydCB0eXBlIE1vY2tlckplc3RPYmplY3RSZXN1bHQgPSB7IFtrOiBzdHJpbmddOiB2aS5TcGllZDxhbnk+IH1cblxuZXhwb3J0IGNsYXNzIE1vY2tlckplc3RPYmplY3RTdHJhdGVneSBpbXBsZW1lbnRzIE1vY2tlclN0cmF0ZWd5PE1vY2tlckplc3RPYmplY3RSZXN1bHQ+IHtcblx0cHJvdGVjdGVkIF9zcGllczogdmkuU3BpZWQ8YW55PltdID0gW11cblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2NvbnRyYWN0OiBBbnlDb250cmFjdCkge31cblxuXHRtb2NrUmVzdG9yZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9zcGllcy5mb3JFYWNoKChzcHkpID0+IHNweS5tb2NrUmVzdG9yZSgpKVxuXHR9XG5cblx0Y29udHJhY3RTcHkoKTogTW9ja2VySmVzdE9iamVjdFJlc3VsdCB7XG5cdFx0cmV0dXJuIHRoaXMuX21vY2tPYmplY3QoKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9tb2NrT2JqZWN0KCk6IE1vY2tlckplc3RPYmplY3RSZXN1bHQge1xuXHRcdGNvbnN0IHsgbW9kdWxlLCBzdWJqZWN0TmFtZSB9ID0gdGhpcy5fY29udHJhY3RcblxuXHRcdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG5cdFx0XHRPYmplY3QuZW50cmllcyh0aGlzLl9jb250cmFjdC5mbnMpLm1hcCgoW2ZuTmFtZSwgY3RGdW5jXSkgPT4ge1xuXHRcdFx0XHRjb25zdCBqZXN0U3B5RnVuY3Rpb24gPSBuZXcgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3koeyBuYW1lOiBgJHtzdWJqZWN0TmFtZX0uJHtmbk5hbWV9YCwgdGVybXM6IGN0RnVuYyEudGVybXMgfSlcblx0XHRcdFx0Y29uc3Qgc3B5ID0gdmkuc3B5T24obW9kdWxlW3N1YmplY3ROYW1lXSwgZm5OYW1lKS5tb2NrSW1wbGVtZW50YXRpb24oamVzdFNweUZ1bmN0aW9uLm1vY2tJbXBsZW1lbnRhdGlvbkZhY3RvcnkoKSlcblx0XHRcdFx0dGhpcy5fc3BpZXMucHVzaChzcHkpXG5cblx0XHRcdFx0cmV0dXJuIFtmbk5hbWUsIHNweV1cblx0XHRcdH0pXG5cdFx0KVxuXHR9XG59XG4iXX0=