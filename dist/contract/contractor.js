import { describe, it } from 'vitest';
import { contractorService } from '#src/contract/contractor-service';
import { contractExpectService } from '#src/contract/expect/contract-expect-service';
import { contractMockService } from '#src/contract-mock/contract-mock-service';
import { subjectService } from '#src/subject/subject-service';
export const contractor = (contract, fnName) => {
    const { terms, mock } = contract.fns[fnName];
    const moduleMockStrategy = contractMockService.strategyFromFunctionMock(contract.mock);
    const functionMockStrategy = contractMockService.strategyFromFunctionMock(mock);
    describe(contractorService.testDescription({ fnName }), () => {
        try {
            terms.forEach((term) => {
                const subjectStrategy = subjectService.strategyFromContractFunction({ contract, fnName, term });
                it(contractorService.testName({ term }), async () => {
                    moduleMockStrategy.mock({ params: term.params });
                    functionMockStrategy.mock({ params: term.params });
                    const expectStrategy = contractExpectService.fromTerm({ term });
                    await expectStrategy.test(() => subjectStrategy.exec(term));
                    functionMockStrategy.restore();
                    moduleMockStrategy.restore();
                });
            });
        }
        catch (err) {
            console.error(`Error running test on contract:${contract.subjectName}, fn:${fnName}`); // eslint-disable-line no-console
            throw err;
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9jb250cmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRXJDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBQ3BFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFBO0FBQ3BGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFBO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUc3RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FPekIsUUFBVyxFQUNYLE1BQVksRUFDTCxFQUFFO0lBQ1QsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBRSxDQUFBO0lBRTdDLE1BQU0sa0JBQWtCLEdBQUcsbUJBQW1CLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RGLE1BQU0sb0JBQW9CLEdBQUcsbUJBQW1CLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFL0UsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFO1FBQzVELElBQUksQ0FBQztZQUNKLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDdEIsTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLDRCQUE0QixDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2dCQUUvRixFQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtvQkFDbkQsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO29CQUNoRCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7b0JBQ2xELE1BQU0sY0FBYyxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7b0JBQy9ELE1BQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7b0JBQzNELG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFBO29CQUM5QixrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDN0IsQ0FBQyxDQUFDLENBQUE7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNILENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsUUFBUSxDQUFDLFdBQVcsUUFBUSxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsaUNBQWlDO1lBQ3ZILE1BQU0sR0FBRyxDQUFBO1FBQ1YsQ0FBQztJQUNGLENBQUMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0IH0gZnJvbSAndml0ZXN0J1xuXG5pbXBvcnQgeyBjb250cmFjdG9yU2VydmljZSB9IGZyb20gJyNzcmMvY29udHJhY3QvY29udHJhY3Rvci1zZXJ2aWNlJ1xuaW1wb3J0IHsgY29udHJhY3RFeHBlY3RTZXJ2aWNlIH0gZnJvbSAnI3NyYy9jb250cmFjdC9leHBlY3QvY29udHJhY3QtZXhwZWN0LXNlcnZpY2UnXG5pbXBvcnQgeyBjb250cmFjdE1vY2tTZXJ2aWNlIH0gZnJvbSAnI3NyYy9jb250cmFjdC1tb2NrL2NvbnRyYWN0LW1vY2stc2VydmljZSdcbmltcG9ydCB7IHN1YmplY3RTZXJ2aWNlIH0gZnJvbSAnI3NyYy9zdWJqZWN0L3N1YmplY3Qtc2VydmljZSdcbmltcG9ydCB7IHR5cGUgQ29udHJhY3QsIHR5cGUgUHJvcFR5cGUgfSBmcm9tICcjc3JjL3R5cGVzL2luZGV4J1xuXG5leHBvcnQgY29uc3QgY29udHJhY3RvciA9IDxcblx0TSxcblx0U04gZXh0ZW5kcyBFeHRyYWN0PGtleW9mIE0sIHN0cmluZz4sXG5cdFMgZXh0ZW5kcyBQcm9wVHlwZTxNLCBTTj4sXG5cdEMgZXh0ZW5kcyBDb250cmFjdDxNLCBTTiwgUz4sXG5cdENGTksgZXh0ZW5kcyBFeHRyYWN0PGtleW9mIFByb3BUeXBlPEMsICdmbnMnPiwgc3RyaW5nPixcbj4oXG5cdGNvbnRyYWN0OiBDLFxuXHRmbk5hbWU6IENGTktcbik6IHZvaWQgPT4ge1xuXHRjb25zdCB7IHRlcm1zLCBtb2NrIH0gPSBjb250cmFjdC5mbnNbZm5OYW1lXSFcblxuXHRjb25zdCBtb2R1bGVNb2NrU3RyYXRlZ3kgPSBjb250cmFjdE1vY2tTZXJ2aWNlLnN0cmF0ZWd5RnJvbUZ1bmN0aW9uTW9jayhjb250cmFjdC5tb2NrKVxuXHRjb25zdCBmdW5jdGlvbk1vY2tTdHJhdGVneSA9IGNvbnRyYWN0TW9ja1NlcnZpY2Uuc3RyYXRlZ3lGcm9tRnVuY3Rpb25Nb2NrKG1vY2spXG5cblx0ZGVzY3JpYmUoY29udHJhY3RvclNlcnZpY2UudGVzdERlc2NyaXB0aW9uKHsgZm5OYW1lIH0pLCAoKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdHRlcm1zLmZvckVhY2goKHRlcm0pID0+IHtcblx0XHRcdFx0Y29uc3Qgc3ViamVjdFN0cmF0ZWd5ID0gc3ViamVjdFNlcnZpY2Uuc3RyYXRlZ3lGcm9tQ29udHJhY3RGdW5jdGlvbih7IGNvbnRyYWN0LCBmbk5hbWUsIHRlcm0gfSlcblxuXHRcdFx0XHRpdChjb250cmFjdG9yU2VydmljZS50ZXN0TmFtZSh7IHRlcm0gfSksIGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRtb2R1bGVNb2NrU3RyYXRlZ3kubW9jayh7IHBhcmFtczogdGVybS5wYXJhbXMgfSlcblx0XHRcdFx0XHRmdW5jdGlvbk1vY2tTdHJhdGVneS5tb2NrKHsgcGFyYW1zOiB0ZXJtLnBhcmFtcyB9KVxuXHRcdFx0XHRcdGNvbnN0IGV4cGVjdFN0cmF0ZWd5ID0gY29udHJhY3RFeHBlY3RTZXJ2aWNlLmZyb21UZXJtKHsgdGVybSB9KVxuXHRcdFx0XHRcdGF3YWl0IGV4cGVjdFN0cmF0ZWd5LnRlc3QoKCkgPT4gc3ViamVjdFN0cmF0ZWd5LmV4ZWModGVybSkpXG5cdFx0XHRcdFx0ZnVuY3Rpb25Nb2NrU3RyYXRlZ3kucmVzdG9yZSgpXG5cdFx0XHRcdFx0bW9kdWxlTW9ja1N0cmF0ZWd5LnJlc3RvcmUoKVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHJ1bm5pbmcgdGVzdCBvbiBjb250cmFjdDoke2NvbnRyYWN0LnN1YmplY3ROYW1lfSwgZm46JHtmbk5hbWV9YCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdFx0XHR0aHJvdyBlcnJcblx0XHR9XG5cdH0pXG59XG4iXX0=