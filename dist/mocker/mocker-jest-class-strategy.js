import { vi } from 'vitest';
import { SpecialFnName } from '#src/enum/special-fn-name';
import { JestSpyFunctionStrategy } from '#src/jest-spy/jest-spy-function-strategy';
import { jestSpyService } from '#src/jest-spy/jest-spy-service';
export class MockerJestClassStrategy {
    _contract;
    _spy;
    constructor(_contract) {
        this._contract = _contract;
    }
    mockRestore() {
        if (this._spy) {
            this._spy.mockRestore();
        }
    }
    contractSpy() {
        const { module, subjectName } = this._contract;
        const functionNames = this._functionNames(module[subjectName]);
        this._spy = vi.spyOn(module, subjectName);
        this._spy.mockImplementation(this._mockClass(functionNames));
        return this._spy;
    }
    _functionNames(classObject) {
        return Object.getOwnPropertyNames(classObject.prototype).filter((fn) => fn !== 'constructor');
    }
    _mockClass(functionNames) {
        const { fns, subjectName } = this._contract;
        return (...mockParams) => {
            const { [SpecialFnName.CONSTRUCTOR]: constructorFns, ...restFns } = fns;
            const objectWithMockedFunctions = Object.fromEntries(functionNames.map((fnName) => {
                const mockFn = vi.fn();
                if (restFns[fnName]?.terms) {
                    const mockImpl = this._mockFunction({
                        mockClassParams: mockParams,
                        name: `${subjectName}.${fnName}`,
                        terms: restFns[fnName].terms,
                    });
                    mockFn.mockImplementation(mockImpl);
                }
                return [fnName, mockFn];
            }));
            const constructorJestSpy = new JestSpyFunctionStrategy({ name: subjectName, terms: constructorFns.terms });
            const constructorMockImplementation = constructorJestSpy.mockImplementationFactory();
            const constructorResultObject = constructorMockImplementation(...mockParams);
            return { ...objectWithMockedFunctions, ...constructorResultObject };
        };
    }
    _mockFunction(params) {
        const { terms, mockClassParams, name } = params;
        const jestSpyStrategy = jestSpyService.strategyFromTerms({ mockClassParams, name, terms });
        return jestSpyStrategy.mockImplementationFactory();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VyLWplc3QtY2xhc3Mtc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9ja2VyL21vY2tlci1qZXN0LWNsYXNzLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFM0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3pELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFBO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUkvRCxNQUFNLE9BQU8sdUJBQXVCO0lBR2I7SUFGWixJQUFJLENBQWdCO0lBRTlCLFlBQXNCLFNBQXNCO1FBQXRCLGNBQVMsR0FBVCxTQUFTLENBQWE7SUFBRyxDQUFDO0lBRWhELFdBQVc7UUFDVixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDeEIsQ0FBQztJQUNGLENBQUM7SUFFRCxXQUFXO1FBQ1YsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQzlDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQTtRQUU1RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDakIsQ0FBQztJQUVTLGNBQWMsQ0FBQyxXQUFnQjtRQUN4QyxPQUFPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssYUFBYSxDQUFDLENBQUE7SUFDOUYsQ0FBQztJQUVTLFVBQVUsQ0FBQyxhQUF1QjtRQUMzQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFFM0MsT0FBTyxDQUFDLEdBQUcsVUFBaUIsRUFBTyxFQUFFO1lBQ3BDLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7WUFFdkUsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUNuRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQTtnQkFDdEIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7d0JBQ25DLGVBQWUsRUFBRSxVQUFVO3dCQUMzQixJQUFJLEVBQUUsR0FBRyxXQUFXLElBQUksTUFBTSxFQUFFO3dCQUNoQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEtBQUs7cUJBQzdCLENBQUMsQ0FBQTtvQkFDRixNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUE7Z0JBQ3BDLENBQUM7Z0JBRUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUN4QixDQUFDLENBQUMsQ0FDRixDQUFBO1lBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVCQUF1QixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsY0FBZSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDM0csTUFBTSw2QkFBNkIsR0FBRyxrQkFBa0IsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO1lBRXBGLE1BQU0sdUJBQXVCLEdBQUcsNkJBQTZCLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQTtZQUU1RSxPQUFPLEVBQUUsR0FBRyx5QkFBeUIsRUFBRSxHQUFHLHVCQUF1QixFQUFFLENBQUE7UUFDcEUsQ0FBQyxDQUFBO0lBQ0YsQ0FBQztJQUVTLGFBQWEsQ0FBQyxNQUF1RTtRQUM5RixNQUFNLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDL0MsTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTFGLE9BQU8sZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmkgfSBmcm9tICd2aXRlc3QnXG5cbmltcG9ydCB7IFNwZWNpYWxGbk5hbWUgfSBmcm9tICcjc3JjL2VudW0vc3BlY2lhbC1mbi1uYW1lJ1xuaW1wb3J0IHsgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LWZ1bmN0aW9uLXN0cmF0ZWd5J1xuaW1wb3J0IHsgamVzdFNweVNlcnZpY2UgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LXNlcnZpY2UnXG5pbXBvcnQgeyBNb2NrZXJTdHJhdGVneSB9IGZyb20gJyNzcmMvbW9ja2VyL21vY2tlci1zdHJhdGVneSdcbmltcG9ydCB7IEFueUNvbnRyYWN0LCBDb250cmFjdFRlcm0gfSBmcm9tICcjc3JjL3R5cGVzJ1xuXG5leHBvcnQgY2xhc3MgTW9ja2VySmVzdENsYXNzU3RyYXRlZ3kgaW1wbGVtZW50cyBNb2NrZXJTdHJhdGVneTx2aS5TcGllZDxhbnk+PiB7XG5cdHByb3RlY3RlZCBfc3B5PzogdmkuU3BpZWQ8YW55PlxuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfY29udHJhY3Q6IEFueUNvbnRyYWN0KSB7fVxuXG5cdG1vY2tSZXN0b3JlKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLl9zcHkpIHtcblx0XHRcdHRoaXMuX3NweS5tb2NrUmVzdG9yZSgpXG5cdFx0fVxuXHR9XG5cblx0Y29udHJhY3RTcHkoKTogdmkuU3BpZWQ8YW55PiB7XG5cdFx0Y29uc3QgeyBtb2R1bGUsIHN1YmplY3ROYW1lIH0gPSB0aGlzLl9jb250cmFjdFxuXHRcdGNvbnN0IGZ1bmN0aW9uTmFtZXMgPSB0aGlzLl9mdW5jdGlvbk5hbWVzKG1vZHVsZVtzdWJqZWN0TmFtZV0pXG5cdFx0dGhpcy5fc3B5ID0gdmkuc3B5T24obW9kdWxlLCBzdWJqZWN0TmFtZSlcblx0XHR0aGlzLl9zcHkubW9ja0ltcGxlbWVudGF0aW9uKHRoaXMuX21vY2tDbGFzcyhmdW5jdGlvbk5hbWVzKSlcblxuXHRcdHJldHVybiB0aGlzLl9zcHlcblx0fVxuXG5cdHByb3RlY3RlZCBfZnVuY3Rpb25OYW1lcyhjbGFzc09iamVjdDogYW55KTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjbGFzc09iamVjdC5wcm90b3R5cGUpLmZpbHRlcigoZm4pID0+IGZuICE9PSAnY29uc3RydWN0b3InKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9tb2NrQ2xhc3MoZnVuY3Rpb25OYW1lczogc3RyaW5nW10pOiAoLi4uYXJnczogYW55W10pID0+IGFueSB7XG5cdFx0Y29uc3QgeyBmbnMsIHN1YmplY3ROYW1lIH0gPSB0aGlzLl9jb250cmFjdFxuXG5cdFx0cmV0dXJuICguLi5tb2NrUGFyYW1zOiBhbnlbXSk6IGFueSA9PiB7XG5cdFx0XHRjb25zdCB7IFtTcGVjaWFsRm5OYW1lLkNPTlNUUlVDVE9SXTogY29uc3RydWN0b3JGbnMsIC4uLnJlc3RGbnMgfSA9IGZuc1xuXG5cdFx0XHRjb25zdCBvYmplY3RXaXRoTW9ja2VkRnVuY3Rpb25zID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdFx0XHRmdW5jdGlvbk5hbWVzLm1hcCgoZm5OYW1lKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbW9ja0ZuID0gdmkuZm4oKVxuXHRcdFx0XHRcdGlmIChyZXN0Rm5zW2ZuTmFtZV0/LnRlcm1zKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBtb2NrSW1wbCA9IHRoaXMuX21vY2tGdW5jdGlvbih7XG5cdFx0XHRcdFx0XHRcdG1vY2tDbGFzc1BhcmFtczogbW9ja1BhcmFtcyxcblx0XHRcdFx0XHRcdFx0bmFtZTogYCR7c3ViamVjdE5hbWV9LiR7Zm5OYW1lfWAsXG5cdFx0XHRcdFx0XHRcdHRlcm1zOiByZXN0Rm5zW2ZuTmFtZV0hLnRlcm1zLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdG1vY2tGbi5tb2NrSW1wbGVtZW50YXRpb24obW9ja0ltcGwpXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIFtmbk5hbWUsIG1vY2tGbl1cblx0XHRcdFx0fSlcblx0XHRcdClcblxuXHRcdFx0Y29uc3QgY29uc3RydWN0b3JKZXN0U3B5ID0gbmV3IEplc3RTcHlGdW5jdGlvblN0cmF0ZWd5KHsgbmFtZTogc3ViamVjdE5hbWUsIHRlcm1zOiBjb25zdHJ1Y3RvckZucyEudGVybXMgfSlcblx0XHRcdGNvbnN0IGNvbnN0cnVjdG9yTW9ja0ltcGxlbWVudGF0aW9uID0gY29uc3RydWN0b3JKZXN0U3B5Lm1vY2tJbXBsZW1lbnRhdGlvbkZhY3RvcnkoKVxuXG5cdFx0XHRjb25zdCBjb25zdHJ1Y3RvclJlc3VsdE9iamVjdCA9IGNvbnN0cnVjdG9yTW9ja0ltcGxlbWVudGF0aW9uKC4uLm1vY2tQYXJhbXMpXG5cblx0XHRcdHJldHVybiB7IC4uLm9iamVjdFdpdGhNb2NrZWRGdW5jdGlvbnMsIC4uLmNvbnN0cnVjdG9yUmVzdWx0T2JqZWN0IH1cblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX21vY2tGdW5jdGlvbihwYXJhbXM6IHsgdGVybXM6IENvbnRyYWN0VGVybVtdOyBtb2NrQ2xhc3NQYXJhbXM6IGFueVtdOyBuYW1lOiBzdHJpbmcgfSk6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55IHtcblx0XHRjb25zdCB7IHRlcm1zLCBtb2NrQ2xhc3NQYXJhbXMsIG5hbWUgfSA9IHBhcmFtc1xuXHRcdGNvbnN0IGplc3RTcHlTdHJhdGVneSA9IGplc3RTcHlTZXJ2aWNlLnN0cmF0ZWd5RnJvbVRlcm1zKHsgbW9ja0NsYXNzUGFyYW1zLCBuYW1lLCB0ZXJtcyB9KVxuXG5cdFx0cmV0dXJuIGplc3RTcHlTdHJhdGVneS5tb2NrSW1wbGVtZW50YXRpb25GYWN0b3J5KClcblx0fVxufVxuIl19