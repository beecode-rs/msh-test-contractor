import { vi } from 'vitest';
import { JestSpyFunctionStrategy } from '#src/jest-spy/jest-spy-function-strategy';
export class MockerJestObjectStrategy {
    _contract;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _spies = [];
    constructor(_contract) {
        this._contract = _contract;
    }
    mockRestore() {
        this._spies.forEach((spy) => spy.mockRestore());
    }
    contractSpy() {
        return this._mockObject();
    }
    _mockObject() {
        const { module, subjectName } = this._contract;
        return Object.fromEntries(Object.entries(this._contract.fns).map(([fnName, ctFunc]) => {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            const jestSpyFunction = new JestSpyFunctionStrategy({ name: `${subjectName}.${fnName}`, terms: ctFunc.terms });
            const spy = vi.spyOn(module[subjectName], fnName).mockImplementation(jestSpyFunction.mockImplementationFactory());
            this._spies.push(spy);
            return [fnName, spy];
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VyLWplc3Qtb2JqZWN0LXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vY2tlci9tb2NrZXItamVzdC1vYmplY3Qtc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUzQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQU9sRixNQUFNLE9BQU8sd0JBQXdCO0lBSWQ7SUFIdEIsOERBQThEO0lBQ3BELE1BQU0sR0FBb0IsRUFBRSxDQUFBO0lBRXRDLFlBQXNCLFNBQXNCO1FBQXRCLGNBQVMsR0FBVCxTQUFTLENBQWE7SUFBRyxDQUFDO0lBRWhELFdBQVc7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVELFdBQVc7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMxQixDQUFDO0lBRVMsV0FBVztRQUNwQixNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFFOUMsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUMzRCw0RUFBNEU7WUFDNUUsTUFBTSxlQUFlLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLFdBQVcsSUFBSSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDL0csTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQTtZQUNqSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUVyQixPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLENBQUMsQ0FBQyxDQUNGLENBQUE7SUFDRixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2aSB9IGZyb20gJ3ZpdGVzdCdcblxuaW1wb3J0IHsgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LWZ1bmN0aW9uLXN0cmF0ZWd5J1xuaW1wb3J0IHsgdHlwZSBNb2NrZXJTdHJhdGVneSB9IGZyb20gJyNzcmMvbW9ja2VyL21vY2tlci1zdHJhdGVneSdcbmltcG9ydCB7IHR5cGUgQW55Q29udHJhY3QgfSBmcm9tICcjc3JjL3R5cGVzL2luZGV4J1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IHR5cGUgTW9ja2VySmVzdE9iamVjdFJlc3VsdCA9IFJlY29yZDxzdHJpbmcsIHZpLlNwaWVkPGFueT4+XG5cbmV4cG9ydCBjbGFzcyBNb2NrZXJKZXN0T2JqZWN0U3RyYXRlZ3kgaW1wbGVtZW50cyBNb2NrZXJTdHJhdGVneTxNb2NrZXJKZXN0T2JqZWN0UmVzdWx0PiB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5cdHByb3RlY3RlZCBfc3BpZXM6IHZpLlNwaWVkPGFueT5bXSA9IFtdXG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIF9jb250cmFjdDogQW55Q29udHJhY3QpIHt9XG5cblx0bW9ja1Jlc3RvcmUoKTogdm9pZCB7XG5cdFx0dGhpcy5fc3BpZXMuZm9yRWFjaCgoc3B5KSA9PiBzcHkubW9ja1Jlc3RvcmUoKSlcblx0fVxuXG5cdGNvbnRyYWN0U3B5KCk6IE1vY2tlckplc3RPYmplY3RSZXN1bHQge1xuXHRcdHJldHVybiB0aGlzLl9tb2NrT2JqZWN0KClcblx0fVxuXG5cdHByb3RlY3RlZCBfbW9ja09iamVjdCgpOiBNb2NrZXJKZXN0T2JqZWN0UmVzdWx0IHtcblx0XHRjb25zdCB7IG1vZHVsZSwgc3ViamVjdE5hbWUgfSA9IHRoaXMuX2NvbnRyYWN0XG5cblx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdFx0T2JqZWN0LmVudHJpZXModGhpcy5fY29udHJhY3QuZm5zKS5tYXAoKFtmbk5hbWUsIGN0RnVuY10pID0+IHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC10ZW1wbGF0ZS1leHByZXNzaW9uc1xuXHRcdFx0XHRjb25zdCBqZXN0U3B5RnVuY3Rpb24gPSBuZXcgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3koeyBuYW1lOiBgJHtzdWJqZWN0TmFtZX0uJHtmbk5hbWV9YCwgdGVybXM6IGN0RnVuYyEudGVybXMgfSlcblx0XHRcdFx0Y29uc3Qgc3B5ID0gdmkuc3B5T24obW9kdWxlW3N1YmplY3ROYW1lXSwgZm5OYW1lKS5tb2NrSW1wbGVtZW50YXRpb24oamVzdFNweUZ1bmN0aW9uLm1vY2tJbXBsZW1lbnRhdGlvbkZhY3RvcnkoKSlcblx0XHRcdFx0dGhpcy5fc3BpZXMucHVzaChzcHkpXG5cblx0XHRcdFx0cmV0dXJuIFtmbk5hbWUsIHNweV1cblx0XHRcdH0pXG5cdFx0KVxuXHR9XG59XG4iXX0=