import { ContractExpectAnyEqualStrategy } from '#src/contract/expect/contract-expect-any-equal-strategy';
import { ContractExpectFunctionResultEqualStrategy } from '#src/contract/expect/contract-expect-function-result-equal-strategy';
import { ContractExpectThrowErrorStrategy } from '#src/contract/expect/contract-expect-throw-error-strategy';
export const contractExpectService = {
    fromTerm: (params) => {
        const { term } = params;
        if (term.result instanceof Error) {
            return new ContractExpectThrowErrorStrategy({ term });
        }
        if (term.returnFnParams) {
            return new ContractExpectFunctionResultEqualStrategy({ term });
        }
        return new ContractExpectAnyEqualStrategy({ term });
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtZXhwZWN0LXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJhY3QvZXhwZWN0L2NvbnRyYWN0LWV4cGVjdC1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHlEQUF5RCxDQUFBO0FBQ3hHLE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxNQUFNLHFFQUFxRSxDQUFBO0FBQy9ILE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDJEQUEyRCxDQUFBO0FBUTVHLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ3BDLFFBQVEsRUFBRSxDQUFDLE1BQThCLEVBQTBCLEVBQUU7UUFDcEUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLFlBQVksS0FBSyxFQUFFLENBQUM7WUFDbEMsT0FBTyxJQUFJLGdDQUFnQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUN0RCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDekIsT0FBTyxJQUFJLHlDQUF5QyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUMvRCxDQUFDO1FBRUQsT0FBTyxJQUFJLDhCQUE4QixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0NBQ0QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyYWN0RXhwZWN0QW55RXF1YWxTdHJhdGVneSB9IGZyb20gJyNzcmMvY29udHJhY3QvZXhwZWN0L2NvbnRyYWN0LWV4cGVjdC1hbnktZXF1YWwtc3RyYXRlZ3knXG5pbXBvcnQgeyBDb250cmFjdEV4cGVjdEZ1bmN0aW9uUmVzdWx0RXF1YWxTdHJhdGVneSB9IGZyb20gJyNzcmMvY29udHJhY3QvZXhwZWN0L2NvbnRyYWN0LWV4cGVjdC1mdW5jdGlvbi1yZXN1bHQtZXF1YWwtc3RyYXRlZ3knXG5pbXBvcnQgeyBDb250cmFjdEV4cGVjdFRocm93RXJyb3JTdHJhdGVneSB9IGZyb20gJyNzcmMvY29udHJhY3QvZXhwZWN0L2NvbnRyYWN0LWV4cGVjdC10aHJvdy1lcnJvci1zdHJhdGVneSdcbmltcG9ydCB7IHR5cGUgQ29udHJhY3RUZXJtIH0gZnJvbSAnI3NyYy90eXBlcy9pbmRleCdcblxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdEV4cGVjdFN0cmF0ZWd5IHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0dGVzdChmbjogKCkgPT4gYW55KTogUHJvbWlzZTx2b2lkPlxufVxuXG5leHBvcnQgY29uc3QgY29udHJhY3RFeHBlY3RTZXJ2aWNlID0ge1xuXHRmcm9tVGVybTogKHBhcmFtczogeyB0ZXJtOiBDb250cmFjdFRlcm0gfSk6IENvbnRyYWN0RXhwZWN0U3RyYXRlZ3kgPT4ge1xuXHRcdGNvbnN0IHsgdGVybSB9ID0gcGFyYW1zXG5cdFx0aWYgKHRlcm0ucmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiBuZXcgQ29udHJhY3RFeHBlY3RUaHJvd0Vycm9yU3RyYXRlZ3koeyB0ZXJtIH0pXG5cdFx0fVxuXHRcdGlmICh0ZXJtLnJldHVybkZuUGFyYW1zKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbnRyYWN0RXhwZWN0RnVuY3Rpb25SZXN1bHRFcXVhbFN0cmF0ZWd5KHsgdGVybSB9KVxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQ29udHJhY3RFeHBlY3RBbnlFcXVhbFN0cmF0ZWd5KHsgdGVybSB9KVxuXHR9LFxufVxuIl19