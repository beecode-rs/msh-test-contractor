import { vi } from 'vitest';
import { JestSpyFunctionStrategy } from '#src/jest-spy/jest-spy-function-strategy';
import { mockerService } from '#src/mocker/mocker-service';
import { fnUtil } from '#src/util/fn-util';
export const mocker = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    contract: (contract) => {
        const mockerStrategy = mockerService.strategyFromContract(contract);
        const spy = mockerStrategy.contractSpy();
        const mockRestore = () => mockerStrategy.mockRestore();
        return { mockRestore, spy };
    },
    function: (contract, fnName) => {
        const { module, subjectName, fns } = contract;
        const { terms } = fns[fnName];
        const spy = // eslint-disable-next-line no-ternary
         fnUtil.isConstructor(fnName)
            ? vi.spyOn(module, subjectName)
            : // eslint-disable-next-line no-ternary
                terms[0]?.constructorParams // if function belongs to class mock prototype
                    ? vi.spyOn(module[subjectName].prototype, fnName)
                    : vi.spyOn(module[subjectName], fnName);
        if (!terms) {
            throw new Error(`Terms not found in function ${fnName} for module ${subjectName}`);
        }
        const jestSpyFunction = new JestSpyFunctionStrategy({ name: `${subjectName}.${fnName}`, terms });
        spy.mockImplementation(jestSpyFunction.mockImplementationFactory());
        const mockRestore = () => spy.mockRestore();
        return { mockRestore, spy };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vY2tlci9tb2NrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUzQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUNsRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFFMUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBUTFDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNyQiw4REFBOEQ7SUFDOUQsUUFBUSxFQUFFLENBQW1ELFFBQVcsRUFBNkIsRUFBRTtRQUN0RyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbkUsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3hDLE1BQU0sV0FBVyxHQUFHLEdBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUU1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFDRCxRQUFRLEVBQUUsQ0FDVCxRQUFXLEVBQ1gsTUFBWSxFQUNXLEVBQUU7UUFDekIsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFBO1FBQzdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFFLENBQUE7UUFFOUIsTUFBTSxHQUFHLEdBQUcsc0NBQXNDO1NBQ2pELE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDL0IsQ0FBQyxDQUFDLHNDQUFzQztnQkFDdkMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLDhDQUE4QztvQkFDMUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUM7b0JBQ2pELENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUUxQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixNQUFNLGVBQWUsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUNuRixDQUFDO1FBRUQsTUFBTSxlQUFlLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLFdBQVcsSUFBSSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFBO1FBRW5FLE1BQU0sV0FBVyxHQUFHLEdBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUVqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQzVCLENBQUM7Q0FDRCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmkgfSBmcm9tICd2aXRlc3QnXG5cbmltcG9ydCB7IEplc3RTcHlGdW5jdGlvblN0cmF0ZWd5IH0gZnJvbSAnI3NyYy9qZXN0LXNweS9qZXN0LXNweS1mdW5jdGlvbi1zdHJhdGVneSdcbmltcG9ydCB7IG1vY2tlclNlcnZpY2UgfSBmcm9tICcjc3JjL21vY2tlci9tb2NrZXItc2VydmljZSdcbmltcG9ydCB7IHR5cGUgQW55Q29udHJhY3QsIHR5cGUgQ29udHJhY3RNb2NrUmV2ZXJ0Rm4sIHR5cGUgUHJvcFR5cGUgfSBmcm9tICcjc3JjL3R5cGVzL2luZGV4J1xuaW1wb3J0IHsgZm5VdGlsIH0gZnJvbSAnI3NyYy91dGlsL2ZuLXV0aWwnXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgdHlwZSBNb2NrZXJDb250cmFjdFJlc3VsdDxTUFkgPSB2aS5TcGllZDxhbnk+PiA9IHtcblx0c3B5OiBTUFlcblx0bW9ja1Jlc3RvcmU6IENvbnRyYWN0TW9ja1JldmVydEZuXG59XG5cbmV4cG9ydCBjb25zdCBtb2NrZXIgPSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5cdGNvbnRyYWN0OiA8U1BZID0gdmkuU3BpZWQ8YW55PiwgQyBleHRlbmRzIEFueUNvbnRyYWN0ID0gYW55Pihjb250cmFjdDogQyk6IE1vY2tlckNvbnRyYWN0UmVzdWx0PFNQWT4gPT4ge1xuXHRcdGNvbnN0IG1vY2tlclN0cmF0ZWd5ID0gbW9ja2VyU2VydmljZS5zdHJhdGVneUZyb21Db250cmFjdChjb250cmFjdClcblx0XHRjb25zdCBzcHkgPSBtb2NrZXJTdHJhdGVneS5jb250cmFjdFNweSgpXG5cdFx0Y29uc3QgbW9ja1Jlc3RvcmUgPSAoKTogdm9pZCA9PiBtb2NrZXJTdHJhdGVneS5tb2NrUmVzdG9yZSgpXG5cblx0XHRyZXR1cm4geyBtb2NrUmVzdG9yZSwgc3B5IH1cblx0fSxcblx0ZnVuY3Rpb246IDxDIGV4dGVuZHMgQW55Q29udHJhY3QsIENGTksgZXh0ZW5kcyBFeHRyYWN0PGtleW9mIFByb3BUeXBlPEMsICdmbnMnPiwgc3RyaW5nPj4oXG5cdFx0Y29udHJhY3Q6IEMsXG5cdFx0Zm5OYW1lOiBDRk5LXG5cdCk6IE1vY2tlckNvbnRyYWN0UmVzdWx0ID0+IHtcblx0XHRjb25zdCB7IG1vZHVsZSwgc3ViamVjdE5hbWUsIGZucyB9ID0gY29udHJhY3Rcblx0XHRjb25zdCB7IHRlcm1zIH0gPSBmbnNbZm5OYW1lXSFcblxuXHRcdGNvbnN0IHNweSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZXJuYXJ5XG5cdFx0XHRmblV0aWwuaXNDb25zdHJ1Y3Rvcihmbk5hbWUpXG5cdFx0XHRcdD8gdmkuc3B5T24obW9kdWxlLCBzdWJqZWN0TmFtZSlcblx0XHRcdFx0OiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGVybmFyeVxuXHRcdFx0XHRcdHRlcm1zWzBdPy5jb25zdHJ1Y3RvclBhcmFtcyAvLyBpZiBmdW5jdGlvbiBiZWxvbmdzIHRvIGNsYXNzIG1vY2sgcHJvdG90eXBlXG5cdFx0XHRcdFx0PyB2aS5zcHlPbihtb2R1bGVbc3ViamVjdE5hbWVdLnByb3RvdHlwZSwgZm5OYW1lKVxuXHRcdFx0XHRcdDogdmkuc3B5T24obW9kdWxlW3N1YmplY3ROYW1lXSwgZm5OYW1lKVxuXG5cdFx0aWYgKCF0ZXJtcykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBUZXJtcyBub3QgZm91bmQgaW4gZnVuY3Rpb24gJHtmbk5hbWV9IGZvciBtb2R1bGUgJHtzdWJqZWN0TmFtZX1gKVxuXHRcdH1cblxuXHRcdGNvbnN0IGplc3RTcHlGdW5jdGlvbiA9IG5ldyBKZXN0U3B5RnVuY3Rpb25TdHJhdGVneSh7IG5hbWU6IGAke3N1YmplY3ROYW1lfS4ke2ZuTmFtZX1gLCB0ZXJtcyB9KVxuXHRcdHNweS5tb2NrSW1wbGVtZW50YXRpb24oamVzdFNweUZ1bmN0aW9uLm1vY2tJbXBsZW1lbnRhdGlvbkZhY3RvcnkoKSlcblxuXHRcdGNvbnN0IG1vY2tSZXN0b3JlID0gKCk6IHZvaWQgPT4gc3B5Lm1vY2tSZXN0b3JlKClcblxuXHRcdHJldHVybiB7IG1vY2tSZXN0b3JlLCBzcHkgfVxuXHR9LFxufVxuIl19