import { jest } from '@jest/globals';
import { SpecialFnName } from '../enum/special-fn-name.js';
import { JestSpyFunctionStrategy } from '../jest-spy/jest-spy-function-strategy.js';
import { jestSpyService } from '../jest-spy/jest-spy-service.js';
export class MockerJestClassStrategy {
    _contract;
    _spy;
    constructor(_contract) {
        this._contract = _contract;
    }
    mockRestore() {
        if (this._spy) {
            this._spy.mockRestore();
        }
    }
    contractSpy() {
        const { module, subjectName } = this._contract;
        const functionNames = this._functionNames(module[subjectName]);
        this._spy = jest.spyOn(module, subjectName);
        this._spy.mockImplementation(this._mockClass(functionNames));
        return this._spy;
    }
    _functionNames(classObject) {
        return Object.getOwnPropertyNames(classObject.prototype).filter((fn) => fn !== 'constructor');
    }
    _mockClass(functionNames) {
        const { fns, subjectName } = this._contract;
        return (...mockParams) => {
            const { [SpecialFnName.CONSTRUCTOR]: constructorFns, ...restFns } = fns;
            const objectWithMockedFunctions = Object.fromEntries(functionNames.map((fnName) => {
                const mockFn = jest.fn();
                if (restFns[fnName]?.terms) {
                    const mockImpl = this._mockFunction({
                        mockClassParams: mockParams,
                        name: `${subjectName}.${fnName}`,
                        terms: restFns[fnName].terms,
                    });
                    mockFn.mockImplementation(mockImpl);
                }
                return [fnName, mockFn];
            }));
            const constructorJestSpy = new JestSpyFunctionStrategy({ name: subjectName, terms: constructorFns.terms });
            const constructorMockImplementation = constructorJestSpy.mockImplementationFactory();
            const constructorResultObject = constructorMockImplementation(...mockParams);
            return { ...objectWithMockedFunctions, ...constructorResultObject };
        };
    }
    _mockFunction(params) {
        const { terms, mockClassParams, name } = params;
        const jestSpyStrategy = jestSpyService.strategyFromTerms({ mockClassParams, name, terms });
        return jestSpyStrategy.mockImplementationFactory();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VyLWplc3QtY2xhc3Mtc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9ja2VyL21vY2tlci1qZXN0LWNsYXNzLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3pELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFBO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUkvRCxNQUFNLE9BQU8sdUJBQXVCO0lBR2I7SUFGWixJQUFJLENBQWtCO0lBRWhDLFlBQXNCLFNBQXNCO1FBQXRCLGNBQVMsR0FBVCxTQUFTLENBQWE7SUFBRyxDQUFDO0lBRWhELFdBQVc7UUFDVixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDeEIsQ0FBQztJQUNGLENBQUM7SUFFRCxXQUFXO1FBQ1YsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQzlDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQTtRQUU1RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDakIsQ0FBQztJQUVTLGNBQWMsQ0FBQyxXQUFnQjtRQUN4QyxPQUFPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssYUFBYSxDQUFDLENBQUE7SUFDOUYsQ0FBQztJQUVTLFVBQVUsQ0FBQyxhQUF1QjtRQUMzQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFFM0MsT0FBTyxDQUFDLEdBQUcsVUFBaUIsRUFBTyxFQUFFO1lBQ3BDLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7WUFFdkUsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUNuRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtnQkFDeEIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7d0JBQ25DLGVBQWUsRUFBRSxVQUFVO3dCQUMzQixJQUFJLEVBQUUsR0FBRyxXQUFXLElBQUksTUFBTSxFQUFFO3dCQUNoQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEtBQUs7cUJBQzdCLENBQUMsQ0FBQTtvQkFDRixNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUE7Z0JBQ3BDLENBQUM7Z0JBRUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUN4QixDQUFDLENBQUMsQ0FDRixDQUFBO1lBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVCQUF1QixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsY0FBZSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDM0csTUFBTSw2QkFBNkIsR0FBRyxrQkFBa0IsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO1lBRXBGLE1BQU0sdUJBQXVCLEdBQUcsNkJBQTZCLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQTtZQUU1RSxPQUFPLEVBQUUsR0FBRyx5QkFBeUIsRUFBRSxHQUFHLHVCQUF1QixFQUFFLENBQUE7UUFDcEUsQ0FBQyxDQUFBO0lBQ0YsQ0FBQztJQUVTLGFBQWEsQ0FBQyxNQUF1RTtRQUM5RixNQUFNLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDL0MsTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTFGLE9BQU8sZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnXG5cbmltcG9ydCB7IFNwZWNpYWxGbk5hbWUgfSBmcm9tICcjc3JjL2VudW0vc3BlY2lhbC1mbi1uYW1lJ1xuaW1wb3J0IHsgSmVzdFNweUZ1bmN0aW9uU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LWZ1bmN0aW9uLXN0cmF0ZWd5J1xuaW1wb3J0IHsgamVzdFNweVNlcnZpY2UgfSBmcm9tICcjc3JjL2plc3Qtc3B5L2plc3Qtc3B5LXNlcnZpY2UnXG5pbXBvcnQgeyBNb2NrZXJTdHJhdGVneSB9IGZyb20gJyNzcmMvbW9ja2VyL21vY2tlci1zdHJhdGVneSdcbmltcG9ydCB7IEFueUNvbnRyYWN0LCBDb250cmFjdFRlcm0gfSBmcm9tICcjc3JjL3R5cGVzJ1xuXG5leHBvcnQgY2xhc3MgTW9ja2VySmVzdENsYXNzU3RyYXRlZ3kgaW1wbGVtZW50cyBNb2NrZXJTdHJhdGVneTxqZXN0LlNwaWVkPGFueT4+IHtcblx0cHJvdGVjdGVkIF9zcHk/OiBqZXN0LlNwaWVkPGFueT5cblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2NvbnRyYWN0OiBBbnlDb250cmFjdCkge31cblxuXHRtb2NrUmVzdG9yZSgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5fc3B5KSB7XG5cdFx0XHR0aGlzLl9zcHkubW9ja1Jlc3RvcmUoKVxuXHRcdH1cblx0fVxuXG5cdGNvbnRyYWN0U3B5KCk6IGplc3QuU3BpZWQ8YW55PiB7XG5cdFx0Y29uc3QgeyBtb2R1bGUsIHN1YmplY3ROYW1lIH0gPSB0aGlzLl9jb250cmFjdFxuXHRcdGNvbnN0IGZ1bmN0aW9uTmFtZXMgPSB0aGlzLl9mdW5jdGlvbk5hbWVzKG1vZHVsZVtzdWJqZWN0TmFtZV0pXG5cdFx0dGhpcy5fc3B5ID0gamVzdC5zcHlPbihtb2R1bGUsIHN1YmplY3ROYW1lKVxuXHRcdHRoaXMuX3NweS5tb2NrSW1wbGVtZW50YXRpb24odGhpcy5fbW9ja0NsYXNzKGZ1bmN0aW9uTmFtZXMpKVxuXG5cdFx0cmV0dXJuIHRoaXMuX3NweVxuXHR9XG5cblx0cHJvdGVjdGVkIF9mdW5jdGlvbk5hbWVzKGNsYXNzT2JqZWN0OiBhbnkpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNsYXNzT2JqZWN0LnByb3RvdHlwZSkuZmlsdGVyKChmbikgPT4gZm4gIT09ICdjb25zdHJ1Y3RvcicpXG5cdH1cblxuXHRwcm90ZWN0ZWQgX21vY2tDbGFzcyhmdW5jdGlvbk5hbWVzOiBzdHJpbmdbXSk6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55IHtcblx0XHRjb25zdCB7IGZucywgc3ViamVjdE5hbWUgfSA9IHRoaXMuX2NvbnRyYWN0XG5cblx0XHRyZXR1cm4gKC4uLm1vY2tQYXJhbXM6IGFueVtdKTogYW55ID0+IHtcblx0XHRcdGNvbnN0IHsgW1NwZWNpYWxGbk5hbWUuQ09OU1RSVUNUT1JdOiBjb25zdHJ1Y3RvckZucywgLi4ucmVzdEZucyB9ID0gZm5zXG5cblx0XHRcdGNvbnN0IG9iamVjdFdpdGhNb2NrZWRGdW5jdGlvbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG5cdFx0XHRcdGZ1bmN0aW9uTmFtZXMubWFwKChmbk5hbWUpID0+IHtcblx0XHRcdFx0XHRjb25zdCBtb2NrRm4gPSBqZXN0LmZuKClcblx0XHRcdFx0XHRpZiAocmVzdEZuc1tmbk5hbWVdPy50ZXJtcykge1xuXHRcdFx0XHRcdFx0Y29uc3QgbW9ja0ltcGwgPSB0aGlzLl9tb2NrRnVuY3Rpb24oe1xuXHRcdFx0XHRcdFx0XHRtb2NrQ2xhc3NQYXJhbXM6IG1vY2tQYXJhbXMsXG5cdFx0XHRcdFx0XHRcdG5hbWU6IGAke3N1YmplY3ROYW1lfS4ke2ZuTmFtZX1gLFxuXHRcdFx0XHRcdFx0XHR0ZXJtczogcmVzdEZuc1tmbk5hbWVdIS50ZXJtcyxcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRtb2NrRm4ubW9ja0ltcGxlbWVudGF0aW9uKG1vY2tJbXBsKVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBbZm5OYW1lLCBtb2NrRm5dXG5cdFx0XHRcdH0pXG5cdFx0XHQpXG5cblx0XHRcdGNvbnN0IGNvbnN0cnVjdG9ySmVzdFNweSA9IG5ldyBKZXN0U3B5RnVuY3Rpb25TdHJhdGVneSh7IG5hbWU6IHN1YmplY3ROYW1lLCB0ZXJtczogY29uc3RydWN0b3JGbnMhLnRlcm1zIH0pXG5cdFx0XHRjb25zdCBjb25zdHJ1Y3Rvck1vY2tJbXBsZW1lbnRhdGlvbiA9IGNvbnN0cnVjdG9ySmVzdFNweS5tb2NrSW1wbGVtZW50YXRpb25GYWN0b3J5KClcblxuXHRcdFx0Y29uc3QgY29uc3RydWN0b3JSZXN1bHRPYmplY3QgPSBjb25zdHJ1Y3Rvck1vY2tJbXBsZW1lbnRhdGlvbiguLi5tb2NrUGFyYW1zKVxuXG5cdFx0XHRyZXR1cm4geyAuLi5vYmplY3RXaXRoTW9ja2VkRnVuY3Rpb25zLCAuLi5jb25zdHJ1Y3RvclJlc3VsdE9iamVjdCB9XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9tb2NrRnVuY3Rpb24ocGFyYW1zOiB7IHRlcm1zOiBDb250cmFjdFRlcm1bXTsgbW9ja0NsYXNzUGFyYW1zOiBhbnlbXTsgbmFtZTogc3RyaW5nIH0pOiAoLi4uYXJnczogYW55W10pID0+IGFueSB7XG5cdFx0Y29uc3QgeyB0ZXJtcywgbW9ja0NsYXNzUGFyYW1zLCBuYW1lIH0gPSBwYXJhbXNcblx0XHRjb25zdCBqZXN0U3B5U3RyYXRlZ3kgPSBqZXN0U3B5U2VydmljZS5zdHJhdGVneUZyb21UZXJtcyh7IG1vY2tDbGFzc1BhcmFtcywgbmFtZSwgdGVybXMgfSlcblxuXHRcdHJldHVybiBqZXN0U3B5U3RyYXRlZ3kubW9ja0ltcGxlbWVudGF0aW9uRmFjdG9yeSgpXG5cdH1cbn1cbiJdfQ==